{{! Use the main layout }}
{{!< main }}


<section class="user-posts">
    <!-- you can call posts tweets, or truths, or whatever, these are neologisms. Choose your own new in server.js -->
    <h2>Your Spiked Users' {{{postNeoType}}}s</h2>
    <form id="searchform2" action="/spikedpostsearch" method="POST">
            <input  name="postsearch" id="postsearch2" size="40" type="text" class="PostSearchBar" placeholder="Search Posts"></input>
            <button type="submit"><i class="fa fa-search" aria-hidden="true"></i></button>
    </form>
    <form action="/spikedpostsort" method="POST">
           
        <input type="radio" id="dates" name="sorttype" value="dates"> 
        <label for="dates">Sort by Recency</label>
        <input type="radio" id="nlikes" name="sorttype" value="nlikes"> 
        <label for="nlikes">Sort by Number of Likes</label>
    </form>
    <!-- you'll need to make this conditaionl and #each expression work -->

        <ul>
            {{#if posts3.length}}
            {{#each posts3}}
                <!-- you have to pass the user in to posts and this is the syntax -->
                <h1></h1>
                <div class="userheader" name="{{this.username}}" data-id="{{this.id}}"></div>
                {{> post this user=../user}} 
            {{/each}}
            {{else}}
            <!--<div id="spikednoposts">-->
            <section class="login-register">
            <section class = "register-area" id="logout-area">
             <h3>No spiked users' posts yet! Spike a user in the homepage for some to appear here!</h3>
                </section>
</section>
             {{/if}}
        </ul>

</section>

<script>

     let currentsort = "dates";
    window.addEventListener('load', init);

    let radioss = document.getElementsByName('sorttype');
 for(var i = 0; i < radioss.length; i++){
     radioss[i].addEventListener("click",changeradio);
 }
 let postgroups = document.querySelectorAll(".userheader");
 let lastuser = "";

 for(let i = 0;i<postgroups.length;i++)
 {
    //alert(lastuser);
    if(lastuser!=postgroups[i].getAttribute('name'))
    {
        let str87 = "<h1>"+postgroups[i].getAttribute('name')+"'s Posts"+"</h1>";
        postgroups[i].innerHTML=str87;
    }
    lastuser = postgroups[i].getAttribute('name');
 }

  let spikebtns = document.querySelectorAll(".SpikeButton");
    for(let i = 0;i<postgroups.length;i++)
    {
        spikebtns[i].textContent = "UNSPIKE";
     //   spikebtns[i].removeEventListener('click', handleSpike);
        spikebtns[i].addEventListener('click', handleUnspike2);
    }
    function init()
    {
          let spikebtns = document.querySelectorAll(".SpikeButton");
    for(let i = 0;i<postgroups.length;i++)
    {
        spikebtns[i].textContent = "UNSPIKE";
     //   spikebtns[i].removeEventListener('click', handleSpike);
        spikebtns[i].addEventListener('click', handleUnspike2);
    }
    }
   // function init(){
         fetch("/getSearchTerm", {
            method: "GET",
        })
        .then(response => response.text())
        .then(text => {
           // alert(text);
            document.getElementById("postsearch2").value = text;    
        })
        .catch(error => console.error('Error:', error));
  //  }
function searchPosts() {
        document.getElementById("searchform2").submit();
    }
 function handleUnspike2(event)
 {
   
    //window.location.reload();
    /*
    let buttonElement = event.target.closest('.SpikeButton');
    if(buttonElement.textContent=="UNSPIKE")
    {
       // alert("inuspike");
    let paramstr = "id="+buttonElement.getAttribute('data-id');
    let t = buttonElement.getAttribute('data-id');
     if(t!=undefined)
     {
         const urlstr = "/unspike/:"+t;
         fetch(urlstr, {
             method: "POST",
             headers: new Headers({
                 'Content-Type': 'application/x-www-form-urlencoded', // <-- Specifying the Content-Type
                 }),
                 body: paramstr
         })
         .then(response => response.text())
         .then(text => {
             if (text.includes("unspiked")) {
        fetch("/spikedusers", {
            method: "GET",
        })
        .catch(error => console.error('Error:', error));
        window.location.reload();
              //   window.location.reload();
             }
         })
         .catch(error => console.error('Error:', error));
     }
    }
    */
 }
 function changeradio()
 {
     let s  = document.querySelector('input[name="sorttype"]:checked').value;
     if(s!=currentsort) //currentsort
     {
         currentsort=s;
         this.closest("form").submit();
     }
     document.getElementById(s).checked=true;
 }
 
    //fetches emoji api access key from server upon page load
    function init(){
         fetch("/getCurrentSortType", {
             method: "GET",
         })
         .then(response => response.text())
         .then(text => {
             //alert(text);  
             document.getElementById(text).checked=true;  
             currentsort = text;  
         })
         .catch(error => console.error('Error:', error));
     }
         
     function handleError(err)
     {
       //  alert("error");
     }
     async function statusCheck(res){
         if(!res.ok)
         {
             throw new Error(await res.text());
         }
         return res;
     }
 
 </script>

